// Code generated by protoc-gen-go. DO NOT EDIT.
// source: profile.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Profile struct {
	PeerID           string                     `protobuf:"bytes,1,opt,name=peerID" json:"peerID,omitempty"`
	Handle           string                     `protobuf:"bytes,2,opt,name=handle" json:"handle,omitempty"`
	Name             string                     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Location         string                     `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	About            string                     `protobuf:"bytes,5,opt,name=about" json:"about,omitempty"`
	ShortDescription string                     `protobuf:"bytes,6,opt,name=shortDescription" json:"shortDescription,omitempty"`
	Nsfw             bool                       `protobuf:"varint,7,opt,name=nsfw" json:"nsfw,omitempty"`
	Vendor           bool                       `protobuf:"varint,8,opt,name=vendor" json:"vendor,omitempty"`
	Moderator        bool                       `protobuf:"varint,9,opt,name=moderator" json:"moderator,omitempty"`
	ModeratorInfo    *Moderator                 `protobuf:"bytes,10,opt,name=moderatorInfo" json:"moderatorInfo,omitempty"`
	ContactInfo      *Profile_Contact           `protobuf:"bytes,11,opt,name=contactInfo" json:"contactInfo,omitempty"`
	Colors           *Profile_Colors            `protobuf:"bytes,12,opt,name=colors" json:"colors,omitempty"`
	AvatarHashes     *Profile_Image             `protobuf:"bytes,13,opt,name=avatarHashes" json:"avatarHashes,omitempty"`
	HeaderHashes     *Profile_Image             `protobuf:"bytes,14,opt,name=headerHashes" json:"headerHashes,omitempty"`
	Stats            *Profile_Stats             `protobuf:"bytes,15,opt,name=stats" json:"stats,omitempty"`
	BitcoinPubkey    string                     `protobuf:"bytes,16,opt,name=bitcoinPubkey" json:"bitcoinPubkey,omitempty"`
	LastModified     *google_protobuf.Timestamp `protobuf:"bytes,17,opt,name=lastModified" json:"lastModified,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *Profile) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *Profile) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Profile) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *Profile) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *Profile) GetNsfw() bool {
	if m != nil {
		return m.Nsfw
	}
	return false
}

func (m *Profile) GetVendor() bool {
	if m != nil {
		return m.Vendor
	}
	return false
}

func (m *Profile) GetModerator() bool {
	if m != nil {
		return m.Moderator
	}
	return false
}

func (m *Profile) GetModeratorInfo() *Moderator {
	if m != nil {
		return m.ModeratorInfo
	}
	return nil
}

func (m *Profile) GetContactInfo() *Profile_Contact {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *Profile) GetColors() *Profile_Colors {
	if m != nil {
		return m.Colors
	}
	return nil
}

func (m *Profile) GetAvatarHashes() *Profile_Image {
	if m != nil {
		return m.AvatarHashes
	}
	return nil
}

func (m *Profile) GetHeaderHashes() *Profile_Image {
	if m != nil {
		return m.HeaderHashes
	}
	return nil
}

func (m *Profile) GetStats() *Profile_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Profile) GetBitcoinPubkey() string {
	if m != nil {
		return m.BitcoinPubkey
	}
	return ""
}

func (m *Profile) GetLastModified() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastModified
	}
	return nil
}

type Profile_Contact struct {
	Website     string                   `protobuf:"bytes,1,opt,name=website" json:"website,omitempty"`
	Email       string                   `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	PhoneNumber string                   `protobuf:"bytes,3,opt,name=phoneNumber" json:"phoneNumber,omitempty"`
	Social      []*Profile_SocialAccount `protobuf:"bytes,4,rep,name=social" json:"social,omitempty"`
}

func (m *Profile_Contact) Reset()                    { *m = Profile_Contact{} }
func (m *Profile_Contact) String() string            { return proto.CompactTextString(m) }
func (*Profile_Contact) ProtoMessage()               {}
func (*Profile_Contact) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 0} }

func (m *Profile_Contact) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Profile_Contact) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Profile_Contact) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Profile_Contact) GetSocial() []*Profile_SocialAccount {
	if m != nil {
		return m.Social
	}
	return nil
}

type Profile_SocialAccount struct {
	Type     string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Proof    string `protobuf:"bytes,3,opt,name=proof" json:"proof,omitempty"`
}

func (m *Profile_SocialAccount) Reset()                    { *m = Profile_SocialAccount{} }
func (m *Profile_SocialAccount) String() string            { return proto.CompactTextString(m) }
func (*Profile_SocialAccount) ProtoMessage()               {}
func (*Profile_SocialAccount) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 1} }

func (m *Profile_SocialAccount) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Profile_SocialAccount) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Profile_SocialAccount) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

type Profile_Image struct {
	Tiny     string `protobuf:"bytes,1,opt,name=tiny" json:"tiny,omitempty"`
	Small    string `protobuf:"bytes,2,opt,name=small" json:"small,omitempty"`
	Medium   string `protobuf:"bytes,3,opt,name=medium" json:"medium,omitempty"`
	Large    string `protobuf:"bytes,4,opt,name=large" json:"large,omitempty"`
	Original string `protobuf:"bytes,5,opt,name=original" json:"original,omitempty"`
}

func (m *Profile_Image) Reset()                    { *m = Profile_Image{} }
func (m *Profile_Image) String() string            { return proto.CompactTextString(m) }
func (*Profile_Image) ProtoMessage()               {}
func (*Profile_Image) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 2} }

func (m *Profile_Image) GetTiny() string {
	if m != nil {
		return m.Tiny
	}
	return ""
}

func (m *Profile_Image) GetSmall() string {
	if m != nil {
		return m.Small
	}
	return ""
}

func (m *Profile_Image) GetMedium() string {
	if m != nil {
		return m.Medium
	}
	return ""
}

func (m *Profile_Image) GetLarge() string {
	if m != nil {
		return m.Large
	}
	return ""
}

func (m *Profile_Image) GetOriginal() string {
	if m != nil {
		return m.Original
	}
	return ""
}

type Profile_Colors struct {
	Primary       string `protobuf:"bytes,1,opt,name=primary" json:"primary,omitempty"`
	Secondary     string `protobuf:"bytes,2,opt,name=secondary" json:"secondary,omitempty"`
	Text          string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	Highlight     string `protobuf:"bytes,4,opt,name=highlight" json:"highlight,omitempty"`
	HighlightText string `protobuf:"bytes,5,opt,name=highlightText" json:"highlightText,omitempty"`
}

func (m *Profile_Colors) Reset()                    { *m = Profile_Colors{} }
func (m *Profile_Colors) String() string            { return proto.CompactTextString(m) }
func (*Profile_Colors) ProtoMessage()               {}
func (*Profile_Colors) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 3} }

func (m *Profile_Colors) GetPrimary() string {
	if m != nil {
		return m.Primary
	}
	return ""
}

func (m *Profile_Colors) GetSecondary() string {
	if m != nil {
		return m.Secondary
	}
	return ""
}

func (m *Profile_Colors) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Profile_Colors) GetHighlight() string {
	if m != nil {
		return m.Highlight
	}
	return ""
}

func (m *Profile_Colors) GetHighlightText() string {
	if m != nil {
		return m.HighlightText
	}
	return ""
}

type Profile_Stats struct {
	FollowerCount   uint32  `protobuf:"varint,1,opt,name=followerCount" json:"followerCount,omitempty"`
	FollowingCount  uint32  `protobuf:"varint,2,opt,name=followingCount" json:"followingCount,omitempty"`
	ListingCount    uint32  `protobuf:"varint,3,opt,name=listingCount" json:"listingCount,omitempty"`
	RatingCount     uint32  `protobuf:"varint,4,opt,name=ratingCount" json:"ratingCount,omitempty"`
	ClassifiedCount uint32  `protobuf:"varint,5,opt,name=classifiedCount" json:"classifiedCount,omitempty"`
	AverageRating   float32 `protobuf:"fixed32,6,opt,name=averageRating" json:"averageRating,omitempty"`
}

func (m *Profile_Stats) Reset()                    { *m = Profile_Stats{} }
func (m *Profile_Stats) String() string            { return proto.CompactTextString(m) }
func (*Profile_Stats) ProtoMessage()               {}
func (*Profile_Stats) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 4} }

func (m *Profile_Stats) GetFollowerCount() uint32 {
	if m != nil {
		return m.FollowerCount
	}
	return 0
}

func (m *Profile_Stats) GetFollowingCount() uint32 {
	if m != nil {
		return m.FollowingCount
	}
	return 0
}

func (m *Profile_Stats) GetListingCount() uint32 {
	if m != nil {
		return m.ListingCount
	}
	return 0
}

func (m *Profile_Stats) GetRatingCount() uint32 {
	if m != nil {
		return m.RatingCount
	}
	return 0
}

func (m *Profile_Stats) GetClassifiedCount() uint32 {
	if m != nil {
		return m.ClassifiedCount
	}
	return 0
}

func (m *Profile_Stats) GetAverageRating() float32 {
	if m != nil {
		return m.AverageRating
	}
	return 0
}

func init() {
	proto.RegisterType((*Profile)(nil), "Profile")
	proto.RegisterType((*Profile_Contact)(nil), "Profile.Contact")
	proto.RegisterType((*Profile_SocialAccount)(nil), "Profile.SocialAccount")
	proto.RegisterType((*Profile_Image)(nil), "Profile.Image")
	proto.RegisterType((*Profile_Colors)(nil), "Profile.Colors")
	proto.RegisterType((*Profile_Stats)(nil), "Profile.Stats")
}

func init() { proto.RegisterFile("profile.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xd5, 0xae, 0x7f, 0x36, 0xb7, 0x5d, 0x87, 0x85, 0x26, 0x2b, 0x42, 0xa2, 0x9a, 0x26,
	0xa8, 0x38, 0x64, 0xa8, 0xdc, 0x91, 0x60, 0x3b, 0xb0, 0xc3, 0xd0, 0x94, 0x8d, 0x0b, 0x37, 0x27,
	0x71, 0x13, 0x0b, 0xc7, 0x8e, 0x6c, 0x77, 0xa3, 0xe2, 0x23, 0xf0, 0x05, 0xf8, 0x7e, 0x1c, 0xf9,
	0x12, 0xc8, 0xaf, 0x9d, 0xb4, 0x19, 0xdc, 0xfc, 0x3c, 0xef, 0xef, 0x75, 0x5f, 0x3b, 0x8f, 0x8b,
	0x66, 0xb5, 0x56, 0x6b, 0x2e, 0x58, 0x5c, 0x6b, 0x65, 0x55, 0xf4, 0xb2, 0x50, 0xaa, 0x10, 0xec,
	0x02, 0x54, 0xba, 0x59, 0x5f, 0x58, 0x5e, 0x31, 0x63, 0x69, 0x55, 0x07, 0x60, 0x5e, 0xa9, 0x9c,
	0x69, 0x6a, 0x95, 0xf6, 0xc6, 0xd9, 0x6f, 0x84, 0xc6, 0xb7, 0x7e, 0x0f, 0x7c, 0x8a, 0x46, 0x35,
	0x63, 0xfa, 0xfa, 0x8a, 0xf4, 0x16, 0xbd, 0xe5, 0x51, 0x12, 0x94, 0xf3, 0x4b, 0x2a, 0x73, 0xc1,
	0x48, 0xdf, 0xfb, 0x5e, 0x61, 0x8c, 0x06, 0x92, 0x56, 0x8c, 0x1c, 0x80, 0x0b, 0x6b, 0x1c, 0xa1,
	0x43, 0xa1, 0x32, 0x6a, 0xb9, 0x92, 0x64, 0x00, 0x7e, 0xab, 0xf1, 0x73, 0x34, 0xa4, 0xa9, 0xda,
	0x58, 0x32, 0x84, 0x82, 0x17, 0xf8, 0x0d, 0x3a, 0x31, 0xa5, 0xd2, 0xf6, 0x8a, 0x99, 0x4c, 0xf3,
	0x1a, 0x3a, 0x47, 0x00, 0xfc, 0xe3, 0xc3, 0x2f, 0x9a, 0xf5, 0x23, 0x19, 0x2f, 0x7a, 0xcb, 0xc3,
	0x04, 0xd6, 0x6e, 0xba, 0x07, 0x26, 0x73, 0xa5, 0xc9, 0x21, 0xb8, 0x41, 0xe1, 0x17, 0xe8, 0xa8,
	0x3d, 0x2c, 0x39, 0x82, 0xd2, 0xce, 0xc0, 0x6f, 0xd1, 0xac, 0x15, 0xd7, 0x72, 0xad, 0x08, 0x5a,
	0xf4, 0x96, 0x93, 0x15, 0x8a, 0x6f, 0x1a, 0x37, 0xe9, 0x02, 0x78, 0x85, 0x26, 0x99, 0x92, 0x96,
	0x66, 0x16, 0xf8, 0x09, 0xf0, 0x27, 0x71, 0xb8, 0xbc, 0xf8, 0xd2, 0xd7, 0x92, 0x7d, 0x08, 0xbf,
	0x46, 0xa3, 0x4c, 0x09, 0xa5, 0x0d, 0x99, 0x02, 0x3e, 0xdf, 0xc3, 0x9d, 0x9d, 0x84, 0x32, 0x5e,
	0xa1, 0x29, 0x7d, 0xa0, 0x96, 0xea, 0x4f, 0xd4, 0x94, 0xcc, 0x90, 0x19, 0xe0, 0xc7, 0x2d, 0x7e,
	0x5d, 0xd1, 0x82, 0x25, 0x1d, 0xc6, 0xf5, 0x94, 0x8c, 0xe6, 0xac, 0xe9, 0x39, 0xfe, 0x7f, 0xcf,
	0x3e, 0x83, 0xcf, 0xd1, 0xd0, 0x58, 0x6a, 0x0d, 0x99, 0x3f, 0x81, 0xef, 0x9c, 0x9b, 0xf8, 0x22,
	0x3e, 0x47, 0xb3, 0x94, 0xdb, 0x4c, 0x71, 0x79, 0xbb, 0x49, 0xbf, 0xb1, 0x2d, 0x39, 0x81, 0xef,
	0xd1, 0x35, 0xf1, 0x7b, 0x34, 0x15, 0xd4, 0xd8, 0x1b, 0x95, 0xf3, 0x35, 0x67, 0x39, 0x79, 0x06,
	0x5b, 0x46, 0xb1, 0xcf, 0x60, 0xdc, 0x64, 0x30, 0xbe, 0x6f, 0x32, 0x98, 0x74, 0xf8, 0xe8, 0x67,
	0x0f, 0x8d, 0xc3, 0xad, 0x61, 0x82, 0xc6, 0x8f, 0x2c, 0x35, 0xdc, 0xb2, 0x90, 0xbd, 0x46, 0xba,
	0xd0, 0xb0, 0x8a, 0x72, 0x11, 0xb2, 0xe7, 0x05, 0x5e, 0xa0, 0x49, 0x5d, 0x2a, 0xc9, 0x3e, 0x6f,
	0xaa, 0x94, 0xe9, 0x90, 0xc0, 0x7d, 0x0b, 0xc7, 0x68, 0x64, 0x54, 0xc6, 0xa9, 0x20, 0x83, 0xc5,
	0xc1, 0x72, 0xb2, 0x3a, 0xdd, 0x1d, 0x15, 0xec, 0x0f, 0x59, 0xa6, 0x36, 0xd2, 0x26, 0x81, 0x8a,
	0xbe, 0xa0, 0x59, 0xa7, 0xe0, 0xb2, 0x66, 0xb7, 0x75, 0x33, 0x0f, 0xac, 0x5d, 0xba, 0x37, 0x86,
	0x69, 0x48, 0xbd, 0x9f, 0xa7, 0xd5, 0x6e, 0xd0, 0x5a, 0x2b, 0xb5, 0x0e, 0xc3, 0x78, 0x11, 0xfd,
	0x40, 0x43, 0xf8, 0x0e, 0xb0, 0x1d, 0x97, 0xdb, 0x76, 0x3b, 0x2e, 0xb7, 0xae, 0xc5, 0x54, 0x54,
	0xb4, 0x67, 0x03, 0xe1, 0x02, 0x5d, 0xb1, 0x9c, 0x6f, 0xaa, 0xb0, 0x53, 0x50, 0x8e, 0x16, 0x54,
	0x17, 0x2c, 0xbc, 0x2b, 0x2f, 0xdc, 0x48, 0x4a, 0xf3, 0x82, 0x4b, 0x2a, 0xc2, 0xbb, 0x6a, 0x75,
	0xf4, 0xab, 0x87, 0x46, 0x3e, 0x68, 0xee, 0x82, 0x6b, 0xcd, 0x2b, 0xaa, 0x9b, 0x09, 0x1a, 0xe9,
	0xde, 0x89, 0x61, 0x99, 0x92, 0xb9, 0xab, 0xf9, 0x41, 0x76, 0x06, 0x8c, 0xcd, 0xbe, 0xdb, 0xe6,
	0x8d, 0xbb, 0xb5, 0xeb, 0x28, 0x79, 0x51, 0x0a, 0x5e, 0x94, 0x36, 0x0c, 0xb3, 0x33, 0x5c, 0x78,
	0x5a, 0x71, 0xef, 0x5a, 0xfd, 0x54, 0x5d, 0x33, 0xfa, 0xd3, 0x43, 0xc3, 0xbb, 0x26, 0x6c, 0x6b,
	0x25, 0x84, 0x7a, 0x64, 0xfa, 0xd2, 0x5d, 0x3c, 0xcc, 0x37, 0x4b, 0xba, 0x26, 0x7e, 0x85, 0x8e,
	0xbd, 0xc1, 0x65, 0xe1, 0xb1, 0x3e, 0x60, 0x4f, 0x5c, 0x7c, 0x86, 0xa6, 0x82, 0x1b, 0xdb, 0x52,
	0x07, 0x40, 0x75, 0x3c, 0x17, 0x1e, 0x4d, 0x77, 0xc8, 0x00, 0x90, 0x7d, 0x0b, 0x2f, 0xd1, 0x3c,
	0x13, 0xd4, 0x18, 0x08, 0xaa, 0xa7, 0x86, 0x40, 0x3d, 0xb5, 0xdd, 0xf4, 0xf4, 0x81, 0x69, 0xf7,
	0xd2, 0xa0, 0x1f, 0xfe, 0xba, 0xfa, 0x49, 0xd7, 0xfc, 0x38, 0xf8, 0xda, 0xaf, 0xd3, 0x74, 0x04,
	0x4f, 0xe2, 0xdd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x98, 0x38, 0x3a, 0xb5, 0x05, 0x00,
	0x00,
}
